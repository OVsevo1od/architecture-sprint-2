name: mongo-sharding-repl
services:

  configSrv:
    image: mirror.gcr.io/mongo:latest
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard1_0:
    image: mirror.gcr.io/mongo:latest
    container_name: shard1_0
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard1_0-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard1_1:
    image: mirror.gcr.io/mongo:latest
    container_name: shard1_1
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1_1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard1_2:
    image: mirror.gcr.io/mongo:latest
    container_name: shard1_2
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1_2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s    

  shard2_0:
    image: mirror.gcr.io/mongo:latest
    container_name: shard2_0
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - shard2_0-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплики
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard2_1:
    image: mirror.gcr.io/mongo:latest
    container_name: shard2_1
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard2_1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплики
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  shard2_2:
    image: mirror.gcr.io/mongo:latest
    container_name: shard2_2
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2_2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплики
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  mongos_router:
    image: mirror.gcr.io/mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8081:8081
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    environment:
      MONGODB_URL: "mongodb://mongos_router:27024"
      MONGODB_DATABASE_NAME: "somedb"

  redis_1:
    image: "redis:latest"
    container_name: redis_1
    ports:
      - "6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.2

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1_0-data:
  shard1_1-data:
  shard1_2-data:
  shard2_0-data:
  shard2_1-data:
  shard2_2-data:
  redis_1_data: {}